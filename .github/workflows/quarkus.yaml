
on:
  workflow_call:
    inputs: {}
    secrets: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: set repo name
      shell: bash
      run: | 
        echo "REPOSITORY_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV     
    - name: checkout code
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Static code check (Emulated)
      run: |
        echo noop       
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build
      run: |
        ./mvnw -B -DskipTests clean package --file pom.xml

    - name: Docker Login
      uses: docker/login-action@v1.10.0
      with:
        registry: 'ghcr.io'
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build container image and push
      uses: docker/build-push-action@v2.6.1
      with:
        context: .
        file: ./${{ env.PROJECT_DIR }}/src/main/docker/Dockerfile.jvm
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ github.sha }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: set repo name
      shell: bash
      run: | 
        echo "REPOSITORY_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV
    - name: checkout code
      uses: actions/checkout@v2             
    - name: kubernetes login
      uses: redhat-actions/oc-login@v1
      with:
        # URL to your OpenShift cluster.
        # Refer to Step 2.
        openshift_server_url: https://api.tmp-raffa.demo.red-chesterfield.com:6443

        # Authentication Token. Can use username and password instead.
        # Refer to Step 3.
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}

        # Disables SSL cert checking. Use this if you don't have the certificate authority data.
        insecure_skip_tls_verify: true

        # Optional - this sets your Kubernetes context's current namespace after logging in.
        namespace: ${{env.REPOSITORY_NAME}}-dev
    - name: create namespace if it does not exists
      env:
        # These can be stored in secrets, if desired.
        OPENSHIFT_NAMESPACE: ${{env.REPOSITORY_NAME}}-dev    
      run: |
        oc project ${OPENSHIFT_NAMESPACE} || oc new-project ${OPENSHIFT_NAMESPACE}  
    - name: deploy
      uses: 'deliverybot/helm@v1.7.0'
      with:
        helm: helm3
        version: ${{ github.sha }}
        release: 'hello-world'
        namespace: ${{env.REPOSITORY_NAME}}-dev
        chart: ".helm"
        values: |
          image: 
            repository: ghcr.io/${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}
            tag: ${{ github.sha }}
          imagePullSecrets:
          - name: github-dockercfg
          repo:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}          
      env:
        KUBECONFIG: '${{ env.KUBECONFIG }}'      

    - name: integration tests (emulated)
      run: |
        echo noop

  deploy-qa:
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
    - name: set repo name
      shell: bash
      run: | 
        echo "REPOSITORY_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV
    - name: checkout code
      uses: actions/checkout@v2        
    - name: kubernetes login
      uses: redhat-actions/oc-login@v1
      with:
        # URL to your OpenShift cluster.
        # Refer to Step 2.
        openshift_server_url: https://api.tmp-raffa.demo.red-chesterfield.com:6443

        # Authentication Token. Can use username and password instead.
        # Refer to Step 3.
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}

        # Disables SSL cert checking. Use this if you don't have the certificate authority data.
        insecure_skip_tls_verify: true

        # Optional - this sets your Kubernetes context's current namespace after logging in.
        namespace: ${{env.REPOSITORY_NAME}}-qa      
    - name: create namespace if it does not exists
      env:
        # These can be stored in secrets, if desired.
        OPENSHIFT_NAMESPACE: ${{env.REPOSITORY_NAME}}-qa    
      run: |
        oc project ${OPENSHIFT_NAMESPACE} || oc new-project ${OPENSHIFT_NAMESPACE}  
    - name: deploy
      uses: 'deliverybot/helm@v1.7.0'
      with:
        helm: helm3
        version: ${{ github.sha }}
        release: 'hello-world'
        namespace: ${{env.REPOSITORY_NAME}}-qa
        chart: "./.helm"
        values: |
          image: 
            repository: ghcr.io/${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}
            tag: ${{ github.sha }}
          imagePullSecrets:
          - name: github-dockercfg
          repo:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}                      
      env:
        KUBECONFIG: '${{ env.KUBECONFIG }}'     

    - name: integration tests (emulated)
      run:
        echo noop


  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-qa
    steps:
    - name: set repo name
      shell: bash
      run: | 
        echo "REPOSITORY_NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_ENV
    - name: checkout code
      uses: actions/checkout@v2        
    - name: Install CLI tools from OpenShift Mirror
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        # Installs the latest release of oc with the major version 3.
        # This is equivalent to "3.x" or "^3".
        oc: "4"      
    - name: kubernetes login
      uses: redhat-actions/oc-login@v1
      with:
        # URL to your OpenShift cluster.
        # Refer to Step 2.
        openshift_server_url: https://api.tmp-raffa.demo.red-chesterfield.com:6443

        # Authentication Token. Can use username and password instead.
        # Refer to Step 3.
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}

        # Disables SSL cert checking. Use this if you don't have the certificate authority data.
        insecure_skip_tls_verify: true

        # Optional - this sets your Kubernetes context's current namespace after logging in.
        namespace:  ${{env.REPOSITORY_NAME}}-prod
    - name: create namespace if it does not exists
      env:
        # These can be stored in secrets, if desired.
        OPENSHIFT_NAMESPACE: ${{env.REPOSITORY_NAME}}-prod    
      run: |
        oc project ${OPENSHIFT_NAMESPACE} || oc new-project ${OPENSHIFT_NAMESPACE}
    - name: deploy
      uses: 'deliverybot/helm@v1.7.0'
      with:
        helm: helm3
        version: ${{ github.sha }}
        release: 'hello-world'
        namespace: ${{env.REPOSITORY_NAME}}-prod
        chart: "./.helm"
        values: |
          image: 
            repository: ghcr.io/${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}
            tag: ${{ github.sha }}
          imagePullSecrets:
          - name: github-dockercfg
          repo:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}             
      env:
        KUBECONFIG: '${{ env.KUBECONFIG }}'       

    - name: smoke test (emulated)
      run: |
        echo noop 